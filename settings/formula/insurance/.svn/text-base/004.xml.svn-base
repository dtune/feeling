<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE Formula-definition SYSTEM "Formula-definition.dtd">
<!-- 商品毎に計算公式はここに定義する -->
<Formula-definition>
	<BizExpenses desc="事業費率の設定">
		<!--　課題28より、「責任準備金としては、年金支払開始日以後は「一括払」を考慮しなくてよいです。」 -->
		<formula name="benefitRequest" value="0"/>
		<!-- TODO: 乗田さんへ確認：事業費率を計算する時、
		上位算式のPVH基礎を関わらず、全部P基礎を使うかどうか。 
		対象：alphaとgamma_nashu -->
		<formula name="alpha" pvh="P">
			if(kaisu==1){
				alpha1*stdPrate+alpha2*F
			}else{
				alpha1*(2*n-m)/(2*n)*12*m*stdPrate+alpha2*F
			}
		</formula>
		<formula name="alpha1" fraction="8">
			0.008*min(n/10,1)
		</formula>
		<formula name="alpha2" value="0.017"/>
		<formula name="delta" fraction="8">
			if(kaisu&gt;1){
				0.02*min(max(m,10)/20,1)
			}else{
				0
			}
		</formula>
		<formula name="gamma1">
			if(gen==1){0.00115}else{0.00105}
		</formula>
		<formula name="gamma2" value="0.001"/>
		<formula name="gamma3" value="0.001"/>
		<formula name="gamma4" value="0.001"/>
		<formula name="gamma_nashu" pvh="P">
			if(kaisu==1){
				<!-- 一時払い -->
				gamma3*stdPrate+gamma4*F
			}else{
				<!-- 払込終了 -->
				gamma3*12*m*stdPrate+gamma4*F
			}
		</formula>
		<formula name="gamma_2nashu" value="0.01"/>
		<formula name="gamma_3nashu" value="0.002"/>
		<formula name="beta" value="0.03"/>
		<formula name="zeta">
			if(gen==1){0.04}elseIf(gen==2){0.03}else{0.025}
		</formula>
		<formula name="epsilon" desc="払込免除">
			if(m&lt;=5){
				0.00075
			}elseIf(m&gt;5 &amp;&amp; m&lt;=10){
				0.0015
			}else{
				0.003
			}
		</formula>
	</BizExpenses>
	
	<Common desc="商品内部の共通公式">
		<formula name="f_Ia_x" paras="f,x" fraction="5">
			D[x+f]/D[x]*Sx(x+f)/D[x+f]
		</formula>
		<formula name="a_g" paras="g" fraction="5">
			(1-v^g)/(1-v)
		</formula>
		<!-- 0720乗田さんから回答より -->
		<formula name="IA_k_x_n" paras="k,x,n" fraction="6">
			(R[x]-R[x+n]-n*M[x+n])/D[x]-(k-1)/(2*k)*(M[x]-M[x+n])/D[x]
		</formula>
		<formula name="F" desc="年金原資">
			if(annuityType==5){F1}else{F2}
			<formula name="F1" fraction="3" desc="保証期間付終身年金（005）">
				<!-- 定額型θが0 年増θが5-->
				((1-theta/100)*(a_g(g)+f_a_x(g,annuityY))+theta/100*{Ia_n(g)+g*f_a_x(g,annuityY)+f_Ia_x(g,annuityY)})
					*
				(1+gamma_2nashu)
			</formula>
			<formula name="F2" fraction="3" desc="確定年金（004）">
				a_g(g)*(1+gamma_2nashu)
			</formula>
		</formula>
		
		<formula name="F_nashu" desc="年金原資（繰り下げ後）'">
			if(annuityType==5){F1_nashu}else{F2_nashu}
			<formula name="F1_nashu" fraction="3" desc="保証期間付終身年金（005）">
				<!-- 定額型θが0 年増θが5-->
				<!-- ここのannuityY+lは年金開始の年齢(l>0の場合、繰り下げ後の年金開始日の年齢と読み替え)とすればよいと思う -->
				((1-theta/100)*(a_g(g)+f_a_x(g,annuityY+l))+theta/100*{Ia_n(g)+g*f_a_x(g,annuityY+l)+f_Ia_x(g,annuityY+l)})
					*
				(1+gamma_2nashu)
			</formula>
			<formula name="F2_nashu" fraction="3" desc="確定年金（004）">
				a_g(g)*(1+gamma_2nashu)
			</formula>
		</formula>
		
		<formula name="PrateByPaymode" paras="stdPrate,d" fraction="5" desc="払込方法別Prate">
			<!-- 基準Prateと高額割引dより、払込方法別Prateを求める -->
			<formula name="Discount" paras="d" desc="高額割引">
				if(kaisu==1){0}
				elseIf(kaisu==2){12*d}
				elseIf(kaisu==3){6*d}
				else{d}
			</formula>
			stdPrate*PayFactor(kaisu,gen,keiro)-Discount(d)
		</formula>
		
		<formula name="S2P" paras="SBasePrate" desc="S基準からP基準に変換する">
				<!-- P建：042,004,005は一緒 -->
				if(kaisu==1){
					round(1/SBasePrate,5)
				}else{
					round(1/SBasePrate,3)
				}
		</formula>
	</Common>
	
	<!-- 保険料　ここから -->
	<Premium desc="保険料">
		<formula name="Prate" pvh="P" accessable="true" desc="１．保険料レート">
			PrateByPaymode(stdPrate,0)
		</formula>
		<formula name="stdPrate" pvh="P" accessable="false" desc="基準保険料レート">
			if(kaisu==1){singlePrate}else{MultiPrate}
			<formula name="singlePrate" fraction="4" desc="一時払いPレート">
				F*{A_x_n_l(x,n)+alpha2+gamma4*a_x_n(x,n)}
					/
				{1-A_x_n_D(x,n)-alpha1-gamma3*a_x_n(x,n)}
			</formula>
			<formula name="MultiPrate" fraction="5" desc="分割払いPレート">
				<!-- 現行SYSの算式は以下どおり -->
				F/12*{A_x_n_l(x,n)+alpha2+gamma2*a_k_x_n(12,x,m)+gamma4*f_a_x_n(m,x,n)}
					/
				{(1-beta-zeta-delta-epsilon-m/2*gamma1)*a_k_x_n(12,x,m)-IA_k_x_n(12,x,m)
					-
				m*(A_x_n_l(x,m)*A_x_n_D(x+m,n-m)+alpha1*(2*n-m)/(2*n)+gamma3*f_a_x_n(m,x,n))}			
			</formula>
		</formula>
		<formula name="PrateByYear" fraction="5" desc="年払Prate">
			stdPrate*PayFactor(2,gen,1)
		</formula>
		<formula name="Premium" pvh="P" accessable="true" desc="２．保険料・保険金">
			<!-- 高額割引がゼロ -->
			if(sptate==0){
				roundDown(SA*Prate,0)
			}else{
				roundUp(
						roundDown(
							SA*S2P(Prate)
							,0)/10
					,0)*10
			}
		</formula>
	</Premium>
	
	<!-- 責任準備金　ここから -->
	<ReserveFund desc="責任準備金">
		<!-- 年金支払開始前 -->
		<formula name="SingleV" paras="t" desc="一時払VTレート">
			F*A_x_n_l(x+t,n-t)+stdPrate*A_x_n_D(x+t,n-t)+gamma_nashu*a_x_n(x+t,n-t)
		</formula>
		<formula name="MultiV" paras="t,z" desc="払込中（免除）VTレート">
			max{
				F*A_x_n_l(x+t,n-t)+12*stdPrate
				
					*
					
				{IA_k_x_n(12,x+t,m-t)+t*A_x_n_D(x+t,n-t)+(m-t)*A_x_n_l(x+t,m-t)*A_x_n_D(x+m,n-m)}+gamma_nashu*ft_a_xt_n(m,t,x,n)
				
					-
					
				{F*A_x_n_l(x,n)+12*stdPrate*{IA_k_x_n(12,x,m)+m*A_x_n_l(x,m)*A_x_n_D(x+m,n-m)}+gamma_nashu*f_a_x_n(m,x,n)}
				
					/
					
				a_x_n(x,m)*a_x_n(x+t,m-t)
				
					-
					
				if(z==0){0}else{alpha/a_x_n(x,z)*a_x_n(x+t,z-t)}
			,0}
			
		</formula>
		<formula name="PaidupV" paras="t" desc="払済保険VTレート">
			F*A_x_n_l(x+t,n-t)+SD*{A_x_n_D(x+t,n-t)+gamma3*a_x_n(x+t,n-t)}/paidupS
			+gamma4*F*a_x_n(x+t,n-t)
		</formula>
		<formula name="PaymentEndV" paras="t" desc="払込期間終了後のVTレート">
			F*A_x_n_l(x+t,n-t)+12*m*stdPrate*A_x_n_D(x+t,n-t)+gamma_nashu*a_x_n(x+t,n-t)
		</formula>
		<!-- 年金支払開始日の繰り下げ中 -->
		<formula name="BenifitPostponingV" paras="t3" fraction="4" desc="年金支払開始日の繰り下げ中のVTレート">
			{v^(l-t3)+gamma_3nashu*a_g(l-t3)}*F_nashu
		</formula>
		<!-- 年金支払開始前以後-->
		<formula name="BenifitStartedV" paras="t2" fraction="3" desc="年金支払開始日後のVTレート">
			if(annuityType==5){
				set{g1=max(g-t2,0)}
				if(g&gt;t2&amp;&amp;benefitRequest==1){
					<!-- g>t2において年金一括払の請求があった場合 -->
					{{1+(t2-1)*theta/100}*{0+f_a_x(g1,annuityY+t2)}
					+theta/100*{0+g1*f_a_x(g1,annuityY+t2)+f_Ia_x(g1,annuityY+t2)}}
					*(1+gamma_2nashu)
				}else{
					{{1+(t2-1)*theta/100}*{a_g(g1)+f_a_x(g1,annuityY+t2)}
					+theta/100*{Ia_n(g1)+g1*f_a_x(g1,annuityY+t2)+f_Ia_x(g1,annuityY+t2)}}
					*(1+gamma_2nashu)
				}
			}else{
				a_g(g-t2)*(1+gamma_2nashu)
			}
		</formula>
		
		<formula name="Vrate_accu" paras="t,z" desc="保険年度末rate">
			if(state==4){
				<!-- 払済 -->
				PaidupV(t)
			}elseIf(state==5){
				<!-- 繰り下げ中 -->
				BenifitPostponingV(t)
			}elseIf(state==3){
				<!-- 年金開始後 -->
				BenifitStartedV(t)
			}elseIf((state==1)||(state==6)){
				<!-- 払込期間中　または　免除 -->
				MultiV(t,z)
			}elseIf(kaisu==1){
				<!-- 一時払 -->
				SingleV(t)
			}elseIf(state==2){
				<!-- 払込期間終了後 -->
				PaymentEndV(t)
			}else{0}
		</formula>
		<formula name="Vrate" pvh="H" fraction="4" accessable="true" desc="１．保険年度末Vレート">
			if(state==3){
				Vrate_accu(t2,0)
			}elseIf(state==5){
				Vrate_accu(t3,0)
			}else{
				Vrate_accu(t,0)
			}
		</formula>
		<!-- 契約者保険年度Vrate　ここから -->
		<formula name="ContractorYearV" paras="t,z" pvh="P" fraction="4" desc="契約者保険年度Vrate">
			Vrate_accu(t,z)
		</formula>
		<formula name="ContractorVrate" pvh="P" fraction="4" accessable="true" desc="３．契約者用Vレート">
			if(state==5){
				<!-- 繰り下げ中 -->
				round((1-f_12(f3))*ContractorYearV(t3,z)+f_12(f3)*ContractorYearV(t3+1,z),4)
			}elseIf(state==3){
				<!-- 年金開始後 -->
				if(f2==0){
					ContractorYearV(t2,z)
				}else{
					round(v^((12-f2)/12)*ContractorYearV(t2+1,z),4)
				}				
			}elseIf(state==1||state==6){
				<!-- 払込中 -->
				round((1-f_12(f1))*ContractorYearV(t1,z)+f_12(f1)*ContractorYearV(t1+1,z),4)
			}elseIf(kaisu==1||state==4||state==2){
				round((1-f_12(f))*ContractorYearV(t,z)+f_12(f)*ContractorYearV(t+1,z),4)
			}else{0}
		</formula>
		
		<formula name="BizYearV" paras="t,z" accessable="false" desc="事業末Vレート">
			if(state==1){
				<!-- 払込中 -->
				if(round({F*A_x_n_l(x,n)+12*stdPrate*{IA_k_x_n(12,x,m)+m*f_A_x_n_D(m,x,n-m)}
					+gamma_nashu*f_a_x_n(m,x,n)}/a_x_n(x,m),5)&lt;PrateByYear){
					MultiV(t,z)
				}else{
					max(
						F*A_x_n_l(x+t,n-t)+12*stdPrate
							*
						{IA_k_x_n(12,x+t,m-t)+t*A_x_n_D(x+t,n-t)+(m-t)*A_x_n_l(x+t,m-t)*A_x_n_D(x+m,n-m)}+gamma_nashu*ft_a_xt_n(m,t,x,n)
							-
						PrateByYear*a_x_n(x+t,m-t)
						-if(z==0){0}else{alpha/a_x_n(x,z)*a_x_n(x+t,z-t)}
					,0)
				}	
			}elseIf(state==6){
				<!-- 保険料払込免除契約 -->
					F*A_x_n_l(x+t,n-t)+12*stdPrate
						*
					{IA_k_x_n(12,x+t,m-t)+t*A_x_n_D(x+t,n-t)+(m-t)*A_x_n_l(x+t,m-t)*A_x_n_D(x+m,n-m)}
						+
					{gamma3*0.5*12*m*stdPrate+gamma4*F}*a_x_n(x+t,m-t)
						+
					gamma_nashu*ft_a_xt_n(m)
			}elseIf(state==4){
				<!-- 払済 -->
				PaidupV(t)
			}elseIf(state==5){
				<!-- 繰り下げ中 -->
				BenifitPostponingV(t)
			}elseIf(state==3){
				<!-- 年金開始後 -->
				BenifitStartedV(t)
			}elseIf(kaisu==1){
				<!-- 一時払 -->
				SingleV(t)
			}elseIf(state==2){
				<!-- 払込終了後 -->
				PaymentEndV(t)
			}else{0}
		</formula>
		<formula name="BizYearVate" pvh="if(kisoritsu==0){P}elseIf(kisoritsu==1){V}else{H}" fraction="4" accessable="true" desc="２．事業年度末Vレート">			
			if(state==3){
				BizYearV(t2,z)
			}elseIf(state==5){
				BizYearV(t3,z)
			}else{
				BizYearV(t,z)
			}
		</formula>
		
	</ReserveFund>
	
	<!-- 解約返戻金　ここから -->
	<SurrenderFee desc="解約返戻金">
		<formula name="tWrate" paras="t" pvh="P">
			<formula name="sigma" paras="t">
				{0.006*min(n/10,1)*m*(2*n-m)/(2*n)*12*stdPrate+0.013*F}
					*
				max{1-t/min(m,10),0}
			</formula>
			if(state==1 || state==6){
				<!-- 払込期間中　または　免除 -->
				round(max{ContractorYearV(t,0)-sigma(t),0},4)
			}elseIf(state==5){
				<!-- 繰り下げ中 -->
				max{ContractorYearV(t,0),0}
			}elseIf(state==3){
				<!-- 年金開始後は取り扱わない -->
				0
			}else{
				max{ContractorYearV(t,0),0}
			}
		</formula>
		<formula name="MultiV_V" fraction="4" pvh="V" paras="t,z">
			MultiV(t,z)
		</formula>
		<formula name="Wrate" fraction="4" pvh="P" accessable="true" desc="１．解約返戻金Wレート">
			<formula name="Wrate_Overbar1">
				if(12*t1+f1-12*t-f&lt;0){
					<!-- 払込年月数-経過年月数<0の場合、t,fをt1,f1に読み替え -->
					((1-f_12(f1)))*tWrate(t1)+f_12(f1)*tWrate(t1+1)
				}else{
					((1-f_12(f)))*tWrate(t)+f_12(f)*tWrate(t+1)
				}
			</formula>
			<formula name="Wrate_Overbar2">
				v^ve*round((1-f_12(f1))*tWrate(t1)+f_12(f1)*tWrate(t1+1),4)
			</formula>
			<formula name="Wrate_Overbar3">
				v^ve*round((1-f_12(f1))*min{tWrate(t1),MultiV_V(t1,min(m,5))}+f_12(f1)*min{tWrate(t1+1),MultiV_V(t1+1,min(m,5))},4)
			</formula>
			if(kaisu==1){
				<!-- 一時払い -->
				min{(1-f_12(f))*tWrate(t)+f_12(f)*tWrate(t+1),stdPrate}
			}elseIf(state==1 || state==6){
				<!-- 払込期間中　または　免除 -->
				if(PremiumAbolishSign==1){
					min{Wrate_Overbar1,(12*t+f)*stdPrate}
				}elseIf(contractDate&gt;=20080202){
					min{Wrate_Overbar2,(12*t1+f1)*stdPrate}
				}else{
					min{Wrate_Overbar3,(12*t1+f1)*stdPrate}
				}
			}elseIf(state==2){
				<!-- 払込期間終了後 -->
				min{(1-f_12(f))*tWrate(t)+f_12(f)*tWrate(t+1),12*m*stdPrate}
			}elseIf(state==4){
				<!-- 払済 -->
				min{(1-f_12(f))*tWrate(t)+f_12(f)*tWrate(t+1),SD/paidupS}
			}elseIf(state==5){
				<!-- 繰り下げ中 -->
				(1-f_12(f3))*tWrate(t3)+f_12(f3)*tWrate(t3+1)
			}else{
				0
			}
		</formula>
	</SurrenderFee>
</Formula-definition>